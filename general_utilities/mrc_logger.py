import dxpy
import logging

from logging import Logger


class MRCLogger:

    def __init__(self, name_suffix: str = None):
        """A wrapper around the DNA Nexus logging facility

        We implemented this class to ensure consistent output when running via DNANexus. We can instantiate this class
        in two ways:

        1. with a name_suffix, to create a sublogger
        2. Without a name_suffix, which builds the top-level logger which every other logger hooks into when a
            name_suffix is provided.

        :param name_suffix: Name to start the logger with. Typically will be derived from the __name__ automethod
        """

        if name_suffix is None:
            name = 'MRCLogger'
        else:
            name = '.'.join(['MRCLogger', name_suffix])

        self._logger = logging.getLogger(name)
        if not self._logger.hasHandlers():
            self._logger.addHandler(dxpy.DXLogHandler())
            self._logger.propagate = False
            self._logger.setLevel(logging.INFO)

    def get_logger(self) -> Logger:
        """Getter for the logger built by this class

        :return: The logger generated by this class
        """

        return self._logger
